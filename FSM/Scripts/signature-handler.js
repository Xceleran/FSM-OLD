// Signature Capture Handler for Forms\n\nclass SignatureHandler {\n    constructor() {\n        this.signaturePad = null;\n        this.currentSignatureType = null;\n        this.currentFormInstance = null;\n        this.initializeSignatureModal();\n    }\n\n    initializeSignatureModal() {\n        // Initialize signature pad when modal is shown\n        $('#signatureModal').on('shown.bs.modal', () => {\n            const canvas = document.getElementById('signaturePad');\n            if (canvas && !this.signaturePad) {\n                this.signaturePad = new SignaturePad(canvas, {\n                    backgroundColor: 'rgb(255, 255, 255)',\n                    penColor: 'rgb(0, 0, 0)',\n                    velocityFilterWeight: 0.7,\n                    minWidth: 0.5,\n                    maxWidth: 2.5,\n                    throttle: 16,\n                    minDistance: 5\n                });\n                \n                // Handle canvas resize\n                this.resizeCanvas();\n            }\n        });\n        \n        // Clean up when modal is hidden\n        $('#signatureModal').on('hidden.bs.modal', () => {\n            if (this.signaturePad) {\n                this.signaturePad.clear();\n            }\n        });\n        \n        // Handle window resize\n        $(window).on('resize', () => {\n            if (this.signaturePad) {\n                this.resizeCanvas();\n            }\n        });\n    }\n\n    resizeCanvas() {\n        if (!this.signaturePad) return;\n        \n        const canvas = this.signaturePad.canvas;\n        const ctx = canvas.getContext('2d');\n        \n        // Get the device pixel ratio\n        const ratio = Math.max(window.devicePixelRatio || 1, 1);\n        \n        // Set the actual canvas size in memory\n        canvas.width = canvas.offsetWidth * ratio;\n        canvas.height = canvas.offsetHeight * ratio;\n        \n        // Scale the canvas back down using CSS\n        canvas.style.width = canvas.offsetWidth + 'px';\n        canvas.style.height = canvas.offsetHeight + 'px';\n        \n        // Scale the drawing context so everything draws at the correct size\n        ctx.scale(ratio, ratio);\n        \n        // Clear and reinitialize the signature pad\n        this.signaturePad.clear();\n    }\n\n    captureSignature(type, formInstance = null) {\n        this.currentSignatureType = type;\n        this.currentFormInstance = formInstance;\n        \n        const promptText = type === 'technician' ? \n            'Technician, please sign below:' : \n            'Customer, please sign below:';\n            \n        $('#signaturePrompt').text(promptText);\n        $('#signatureModal').modal('show');\n        \n        // Clear any existing signature\n        setTimeout(() => {\n            if (this.signaturePad) {\n                this.signaturePad.clear();\n            }\n        }, 100);\n    }\n\n    clearSignature() {\n        if (this.signaturePad) {\n            this.signaturePad.clear();\n        }\n    }\n\n    saveSignature() {\n        if (!this.signaturePad || this.signaturePad.isEmpty()) {\n            this.showAlert({\n                icon: 'warning',\n                title: 'Empty Signature',\n                text: 'Please provide a signature before saving.',\n                confirmButtonText: 'OK'\n            });\n            return;\n        }\n        \n        // Get signature as data URL\n        const signatureData = this.signaturePad.toDataURL('image/png');\n        \n        // Convert to blob for storage\n        this.dataURLToBlob(signatureData).then(blob => {\n            this.processSignature(blob, signatureData);\n        });\n    }\n\n    dataURLToBlob(dataURL) {\n        return new Promise((resolve) => {\n            const arr = dataURL.split(',');\n            const mime = arr[0].match(/:(.*?);/)[1];\n            const bstr = atob(arr[1]);\n            let n = bstr.length;\n            const u8arr = new Uint8Array(n);\n            \n            while (n--) {\n                u8arr[n] = bstr.charCodeAt(n);\n            }\n            \n            resolve(new Blob([u8arr], { type: mime }));\n        });\n    }\n\n    processSignature(blob, dataURL) {\n        const displayId = this.currentSignatureType === 'technician' ? \n            'techSignatureDisplay' : 'customerSignatureDisplay';\n        \n        // Update display\n        $(`#${displayId}`).html(`\n            <div class=\"signature-preview\">\n                <img src=\"${dataURL}\" alt=\"${this.currentSignatureType} signature\" \n                     style=\"max-width: 200px; max-height: 100px; border: 1px solid #ddd; border-radius: 4px;\">\n                <br>\n                <button type=\"button\" class=\"btn btn-sm btn-outline-secondary mt-2\" \n                       onclick=\"signatureHandler.captureSignature('${this.currentSignatureType}', currentFormInstance)\">\n                    <i class=\"fa fa-edit\"></i> Change Signature\n                </button>\n            </div>\n        `);\n        \n        // Store signature data in form instance\n        if (this.currentFormInstance) {\n            if (this.currentSignatureType === 'technician') {\n                this.currentFormInstance.TechnicianSignatureData = dataURL;\n            } else {\n                this.currentFormInstance.CustomerSignatureData = dataURL;\n            }\n        }\n        \n        // Store in global form instance if available\n        if (window.currentFormInstance) {\n            if (this.currentSignatureType === 'technician') {\n                window.currentFormInstance.TechnicianSignatureData = dataURL;\n            } else {\n                window.currentFormInstance.CustomerSignatureData = dataURL;\n            }\n        }\n        \n        $('#signatureModal').modal('hide');\n        \n        this.showAlert({\n            icon: 'success',\n            title: 'Signature Captured',\n            text: `${this.currentSignatureType} signature has been saved.`,\n            timer: 2000\n        });\n    }\n\n    // Check if signature exists for given type\n    hasSignature(type, formInstance) {\n        if (!formInstance) return false;\n        \n        return type === 'technician' ? \n            !!formInstance.TechnicianSignatureData : \n            !!formInstance.CustomerSignatureData;\n    }\n\n    // Get signature data URL\n    getSignatureData(type, formInstance) {\n        if (!formInstance) return null;\n        \n        return type === 'technician' ? \n            formInstance.TechnicianSignatureData : \n            formInstance.CustomerSignatureData;\n    }\n\n    // Display existing signature\n    displayExistingSignature(type, formInstance) {\n        const signatureData = this.getSignatureData(type, formInstance);\n        if (!signatureData) return;\n        \n        const displayId = type === 'technician' ? \n            'techSignatureDisplay' : 'customerSignatureDisplay';\n        \n        $(`#${displayId}`).html(`\n            <div class=\"signature-preview\">\n                <img src=\"${signatureData}\" alt=\"${type} signature\" \n                     style=\"max-width: 200px; max-height: 100px; border: 1px solid #ddd; border-radius: 4px;\">\n                <br>\n                <button type=\"button\" class=\"btn btn-sm btn-outline-secondary mt-2\" \n                       onclick=\"signatureHandler.captureSignature('${type}', currentFormInstance)\">\n                    <i class=\"fa fa-edit\"></i> Change Signature\n                </button>\n            </div>\n        `);\n    }\n\n    // Validate signatures for form submission\n    validateSignatures(formInstance) {\n        if (!formInstance.RequireSignature) {\n            return { valid: true };\n        }\n        \n        const hasTechSignature = this.hasSignature('technician', formInstance);\n        const hasCustomerSignature = this.hasSignature('customer', formInstance);\n        \n        if (!hasTechSignature && !hasCustomerSignature) {\n            return {\n                valid: false,\n                message: 'Both technician and customer signatures are required.'\n            };\n        } else if (!hasTechSignature) {\n            return {\n                valid: false,\n                message: 'Technician signature is required.'\n            };\n        } else if (!hasCustomerSignature) {\n            return {\n                valid: false,\n                message: 'Customer signature is required.'\n            };\n        }\n        \n        return { valid: true };\n    }\n\n    showAlert(options) {\n        if (typeof showAlert === 'function') {\n            showAlert(options);\n        } else if (typeof Swal !== 'undefined') {\n            Swal.fire(options);\n        } else {\n            alert(options.text || options.title || 'Alert');\n        }\n    }\n}\n\n// Global signature handler instance\nlet signatureHandler = null;\n\n// Initialize when document is ready\n$(document).ready(function() {\n    signatureHandler = new SignatureHandler();\n});\n\n// Global functions for backward compatibility\nfunction captureSignature(type, formInstance = null) {\n    if (signatureHandler) {\n        signatureHandler.captureSignature(type, formInstance);\n    }\n}\n\nfunction clearSignature() {\n    if (signatureHandler) {\n        signatureHandler.clearSignature();\n    }\n}\n\nfunction saveSignature() {\n    if (signatureHandler) {\n        signatureHandler.saveSignature();\n    }\n}"